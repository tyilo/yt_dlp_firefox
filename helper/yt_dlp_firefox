#!/usr/bin/env -S python3 -u

# Note that running python with the `-u` flag is required on Windows,
# in order to ensure that stdin and stdout are opened in binary, rather
# than text, mode.

import json
import os
import shlex
import struct
import sys
from pathlib import Path
from subprocess import Popen, run


# Read a message from stdin and decode it.
def get_message():
    raw_length = sys.stdin.buffer.read(4)

    if not raw_length:
        sys.exit(0)
    message_length = struct.unpack("=I", raw_length)[0]
    message = sys.stdin.buffer.read(message_length).decode("utf-8")
    return json.loads(message)


# Encode a message for transmission, given its content.
def encode_message(message_content):
    encoded_content = json.dumps(message_content).encode("utf-8")
    encoded_length = struct.pack("=I", len(encoded_content))
    #  use struct.pack("10s", bytes), to pack a string of the length of 10 characters
    return {
        "length": encoded_length,
        "content": struct.pack(str(len(encoded_content)) + "s", encoded_content),
    }


# Send an encoded message to stdout.
def send_message(encoded_message):
    sys.stdout.buffer.write(encoded_message["length"])
    sys.stdout.buffer.write(encoded_message["content"])
    sys.stdout.buffer.flush()

message = get_message()

DOWNLOADS = Path.home() / "Downloads"
if 'wd' in message:
    message_wd = os.path.expanduser(message['wd'])
    if os.path.exists(message_wd):
        DOWNLOADS = message_wd

action = message["action"]
if action == "test":
    reply = {"success": True}
elif action == "download":
    url = message["url"]
    command = ["yt-dlp", *shlex.split(message['flags']), "--print-json", "--", url]

    p = run(
        command,
        capture_output=True,
        text=True,
        cwd=DOWNLOADS,
    )

    if p.returncode == 0:
        output = json.loads(p.stdout)
        reply = {
            "success": True,
            "path": f"{DOWNLOADS}/{output['_filename']}",
            "title": output["title"],
            "thumbnail": output["thumbnail"],
        }
    else:
        reply = {
            "success": False,
            "error": p.stderr,
        }
elif action == "open":
    path = message["path"]
    Popen(["xdg-open", path])
    reply = {"success": True}
elif action == "show":
    path = message["path"]
    Popen(["nautilus", "--", path])
    reply = {"success": True}
else:
    print(f"Got unknown action: {message}", file=sys.stderr)
    reply = {"success": False, "error": f"Unknown action: {action}"}


send_message(encode_message(reply))
